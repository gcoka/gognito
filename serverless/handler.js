"use strict";

const AWS = require("aws-sdk");

/**
 * ユーザーがログインした時に起動するカスタムロジック
 */
module.exports.addUserToGroup = (event, context, callback) => {
  var clientId = event.callerContext.clientId;
  var userPoolId = event.userPoolId;

  console.log(
    "User confirmed: User-Pool" + event.userPoolId,
    ", ClientId:" + clientId,
    ", UserId:" + event.userName
  );

  // group名が取得できたら、ユーザーをgroupに加える
  describeUserPoolClient(clientId, userPoolId)
    .then(data => {
      // groupがなければ作成
      var groupName = data.UserPoolClient.ClientName;
      getGroup(groupName, userPoolId).then(() => {
        // groupにユーザー追加
        adminAddUserToGroup(groupName, userPoolId, event.userName).catch(
          err => {
            throw err;
          }
        );
      }).catch(() => {
        // getGroup失敗ならgroupが無いと判断して、新規作成
        createGroup(groupName, userPoolId, clientId)
          .then(() => {
            // groupにユーザー追加
            adminAddUserToGroup(groupName, userPoolId, event.userName).catch(
              err => {
                throw err;
              }
            );
          })
          .catch(err => {
            throw err;
          });
      });
    })
    .catch(err => {
      console.log(err, err.stack); // an error occurred
    });

  // Return result to Amazon Cognito
  callback(null, event);
};

function describeUserPoolClient(clientId, userPoolId) {
  var cognito = new AWS.CognitoIdentityServiceProvider();

  // app ClientNameをそのままgroup名とする
  var descParams = {
    ClientId: clientId,
    UserPoolId: userPoolId
  };

  return new Promise((resolve, reject) => {
    cognito.describeUserPoolClient(descParams, function(err, data) {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
}

function getGroup(groupName, userPoolId) {
  var cognito = new AWS.CognitoIdentityServiceProvider();

  var getGroupParams = {
    GroupName: groupName,
    UserPoolId: userPoolId
  };
  return new Promise((resolve, reject) => {
    cognito.getGroup(getGroupParams, function(err, data) {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
}

function createGroup(groupName, userPoolId, clientId) {
  var cognito = new AWS.CognitoIdentityServiceProvider();

  var createGroupParams = {
    GroupName: groupName,
    UserPoolId: userPoolId,
    Description: "Autogenerated group for App Client Id: " + clientId
  };
  return new Promise((resolve, reject) => {
    cognito.createGroup(createGroupParams, function(err, data) {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
}

function adminAddUserToGroup(groupName, userPoolId, userName) {
  var cognito = new AWS.CognitoIdentityServiceProvider();

  var addUserParams = {
    GroupName: groupName,
    UserPoolId: userPoolId,
    Username: userName
  };
  return new Promise((resolve, reject) => {
    cognito.adminAddUserToGroup(addUserParams, function(err, data) {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
}
